import { Vec3 } from "../../abstract-3d";

export type CARTESIAN_POINT = { readonly point: Vec3 };
export const carterisanPoint = (v: Vec3): CARTESIAN_POINT => ({ point: v });

export type DIRECTION = { readonly direction: Vec3 };
export const direction = (direction: Vec3): DIRECTION => ({ direction });

export type VERTEX_POINT = { readonly CARTESIAN_POINT: CARTESIAN_POINT };
export const vertexPoint = (CARTESIAN_POINT: CARTESIAN_POINT): VERTEX_POINT => ({ CARTESIAN_POINT });

export type LINE = { readonly CARTESIAN_POINT: CARTESIAN_POINT; readonly VERTEX_POINT: VERTEX_POINT };
export const line = (CARTESIAN_POINT: CARTESIAN_POINT, VERTEX_POINT: VERTEX_POINT): LINE => ({
  CARTESIAN_POINT,
  VERTEX_POINT,
});

export type VECTOR = { readonly DIRECTION: DIRECTION };
export const vector = (DIRECTION: DIRECTION): VECTOR => ({ DIRECTION });

export type EDGE_CURVE = {
  readonly VERTEX_POINT_FROM: VERTEX_POINT;
  readonly VERTEX_POINT_TO: VERTEX_POINT;
  readonly LINE: LINE;
};
export const edgeCurve = (VERTEX_POINT_FROM: VERTEX_POINT, VERTEX_POINT_TO: VERTEX_POINT, LINE: LINE): EDGE_CURVE => ({
  VERTEX_POINT_FROM,
  VERTEX_POINT_TO,
  LINE,
});

export type ORIENTED_EDGE = { readonly EDGE_CURVE: EDGE_CURVE };
export const orientedEdge = (EDGE_CURVE: EDGE_CURVE): ORIENTED_EDGE => ({ EDGE_CURVE });

export type CIRCLE = { readonly AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D };
export const circle = (AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D): CIRCLE => ({ AXIS2_PLACEMENT_3D });

// export type PCURVE = {
//   readonly CYLINDRICAL_SURFACE: number;
//   readonly DEFINITIONAL_REPRESENTATION: DEFINITIONAL_REPRESENTATION;
// };
// export const pcurve = (
//   CYLINDRICAL_SURFACE: CYLINDRICAL_SURFACE,
//   DEFINITIONAL_REPRESENTATION: DEFINITIONAL_REPRESENTATION
// ): PCURVE => ({ CYLINDRICAL_SURFACE, DEFINITIONAL_REPRESENTATION });

// export type SURFACE_CURVE = { readonly CIRCLE: CIRCLE; readonly PCURVE_1: PCURVE; readonly PCURVE_2: PCURVE };
// export const surfaceCurve = (CIRCLE: CIRCLE, PCURVE_1: PCURVE, PCURVE_2: PCURVE): SURFACE_CURVE => ({
//   CIRCLE,
//   PCURVE_1,
//   PCURVE_2,
// });

export type MANIFOLD_SURFACE_SHAPE_REPRESENTATION = {
  readonly AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D;
  readonly CLOSED_SHELL: CLOSED_SHELL;
};
export const manifoldSurfaceShapeRepresentation = (
  AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D,
  CLOSED_SHELL: CLOSED_SHELL
): MANIFOLD_SURFACE_SHAPE_REPRESENTATION => ({ AXIS2_PLACEMENT_3D, CLOSED_SHELL });

export type ADVANCED_BREP_SHAPE_REPRESENTATION = {
  readonly AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D;
  readonly MANIFOLD_SURFACE_SHAPE_REPRESENTATION: MANIFOLD_SURFACE_SHAPE_REPRESENTATION;
};
export const advancedBrepShapeRepresenation = (
  AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D,
  MANIFOLD_SURFACE_SHAPE_REPRESENTATION: MANIFOLD_SURFACE_SHAPE_REPRESENTATION
): ADVANCED_BREP_SHAPE_REPRESENTATION => ({ AXIS2_PLACEMENT_3D, MANIFOLD_SURFACE_SHAPE_REPRESENTATION });

export type CLOSED_SHELL = { readonly ADVANCED_FACE: ReadonlyArray<ADVANCED_FACE> };
export const closedShell = (ADVANCED_FACE: ReadonlyArray<ADVANCED_FACE>): CLOSED_SHELL => ({ ADVANCED_FACE });

export type MANIFOLD_SOLID_BREP = { readonly CLOSED_SHELL: CLOSED_SHELL };
export const manifoldSolidBrep = (CLOSED_SHELL: CLOSED_SHELL): MANIFOLD_SOLID_BREP => ({ CLOSED_SHELL });

export type PLANE = { readonly AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D };
export const plane = (AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D): PLANE => ({ AXIS2_PLACEMENT_3D });

export type ADVANCED_FACE = { readonly FACE_BOUND: FACE_BOUND };
export const advancedFace = (FACE_BOUND: FACE_BOUND): ADVANCED_FACE => ({ FACE_BOUND });

export type OPEN_SHELL = { readonly ADVANCED_FACE: ADVANCED_FACE };
export const openShell = (ADVANCED_FACE: ADVANCED_FACE): OPEN_SHELL => ({ ADVANCED_FACE });

export type FACE_BOUND = { readonly EDGE_CURVE: EDGE_CURVE };
export const faceBound = (EDGE_CURVE: EDGE_CURVE): FACE_BOUND => ({ EDGE_CURVE });

export type EDGE_LOOP = {
  readonly ORIENTED_EDGE_1: number;
  readonly ORIENTED_EDGE_2: number;
  readonly ORIENTED_EDGE_3: number;
  readonly ORIENTED_EDGE_4: number;
};
export const edgeLoop = (
  ORIENTED_EDGE_1: number,
  ORIENTED_EDGE_2: number,
  ORIENTED_EDGE_3: number,
  ORIENTED_EDGE_4: number
): EDGE_LOOP => ({ ORIENTED_EDGE_1, ORIENTED_EDGE_2, ORIENTED_EDGE_3, ORIENTED_EDGE_4 });

export type SHELL_BASED_SURFACE_MODEL = { readonly OPEN_SHELL: OPEN_SHELL };
export const shellBasedSurfaceModel = (OPEN_SHELL: OPEN_SHELL): SHELL_BASED_SURFACE_MODEL => ({ OPEN_SHELL });

export type AXIS2_PLACEMENT_3D = {
  readonly CARTESIAN_POINT: CARTESIAN_POINT;
  DIRECTION_NORMAL: DIRECTION;
  DIRECTION_PLANE_DIRECITON: DIRECTION;
  AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D;
};
export const axis2Placement3d = (
  CARTESIAN_POINT: CARTESIAN_POINT,
  DIRECTION_NORMAL: DIRECTION,
  DIRECTION_PLANE_DIRECITON: DIRECTION,
  AXIS2_PLACEMENT_3D: AXIS2_PLACEMENT_3D
): AXIS2_PLACEMENT_3D => ({ CARTESIAN_POINT, DIRECTION_NORMAL, DIRECTION_PLANE_DIRECITON, AXIS2_PLACEMENT_3D });
